<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- All MVC Configurations Goes Here -->
	<import resource="mvc-mapping-config.xml" />

	<!-- Spring security configurations goes here -->
	<!-- <import resource="spring-security-config.xml" /> -->
	<!-- Telling spring that it should search the class path for all the classes 
		under given base package(s) and look at each class to see if it has a @Controller, 
		or @Repository, or @Service, or @Component and if it does then Spring will 
		register the class with the bean factory as if we had typed <bean class="..."/> 
		in the xml configuration files. -->
	<context:component-scan base-package="com.yash.controller" />

	<!-- maps URL requests to the name of the beans -->
	<bean
		class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" />

	<!-- maps the Responsed view name with given prefix and suffix -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/pages/</value>
		</property>
		<property name="suffix">
			<value>.html</value>
		</property>
	</bean>

</beans>